<?php

include_once('atrium_intranet.features.inc');

/**
 * Implementation of hook_strongarm().
 */
function atrium_intranet_strongarm() {
  $conf = array();

  // ImageAPI
  $conf['imageapi_jpeg_quality'] = 90;

  // Date formats
  $conf['date_format_short'] = 'M j, Y';
  $conf['date_format_medium'] = 'g:ia M j, Y';
  $conf['date_format_long'] = 'g:ia D M j, Y';
  $conf['date_format_field_date_short'] = 'M j, Y';
  $conf['date_format_field_date_medium'] = 'g:ia M j, Y';
  $conf['date_format_field_date_long'] = 'g:ia D M j, Y';

  // Notifications
  $conf['notifications_content_per_type'] = 1;
  $conf['messaging_default_method'] = 'mail';

  // Nodetype settings
  $type = 'admin_message';

  $conf['node_options_'. $type] = array('status');
  $conf["notifications_content_type_$type"] = array();
  $conf['upload_'. $type] = FALSE;

  // Disable comments
  $conf['comment_'. $type] = COMMENT_NODE_DISABLED;

  // Disable FeedAPI
  $conf['feedapi_settings_'. $type] = array('enabled' => FALSE);

  // Disable Diff button
  $conf["show_preview_changes_{$type}"] = FALSE;
  $conf["show_diff_inline_{$type}"] = FALSE;

  // Disable from recent activity views
  $conf['atrium_update_type_'. $type] = FALSE;

  // Menus
  $conf['menu_primary_links_source'] = 'features';

  // Seed variables
  $conf['seed_imagecache_attachment'] = 'fileview';

  // Site variables
  $conf['site_frontpage'] = 'welcome';

  // FeedAPI
  $conf['feedapi_cron_percentage'] = '25';
  $conf['feedapi_allow_html_all'] = FALSE;
  $conf['feedapi_allowed_html_tags'] = '<div> <h1> <h2> <h3> <h4> <h5> <h6> <img> <a> <b> <br> <dd> <dl> <dt> <em> <i> <li> <ol> <p> <strong> <u> <ul>';

  // Views
  $conf['views_no_hover_links'] = TRUE;

  // Views: disable views that we are 'overriding'
  $views_defaults = variable_get('views_defaults', array());
  $disabled = array(
    'admin_content',
    'feeds',
  );
  $set = FALSE;
  foreach ($disabled as $view_name) {
    if (empty($views_defaults[$view_name])) {
      $set = TRUE;
      $views_defaults[$view_name] = TRUE;
    }
  }
  if ($set) {
    variable_set('views_defaults', $views_defaults);
  }

  // Upload settings
  // @TODO should we query for the RIDs here? : (
  $conf['upload_extensions_2'] =
  $conf['upload_extensions_3'] =
  $conf['upload_extensions_4'] =
  $conf['upload_extensions_default'] = 'au avi bzip2 csv doc docx flv gif graffle gz htm html iso jpeg jpg mov mp2 mp3 mp4 odp ods odt pages patch pdf png pps ppt pptx psd rar svg swf template tif tgz txt vsd wav wmv xls xlsx zip';

  $conf['upload_uploadsize_2'] =
  $conf['upload_uploadsize_3'] =
  $conf['upload_uploadsize_4'] =
  $conf['upload_uploadsize_default'] = 20;

  $conf['upload_usersize_2'] =
  $conf['upload_usersize_default'] = 200;

  $conf['upload_usersize_3'] =
  $conf['upload_usersize_4'] = 500;

  $conf['upload_list_default'] = 1;

  // Do not switch to autocomplete until you have more than 200 users.
  $conf['notifications_team_max_options'] = 200;

  // Allowed HTML & default filter format settings
  $format = db_result(db_query("SELECT format FROM {filter_formats} WHERE name = '%s'", 'Markdown'));
  if ($format) {
    $conf["allowed_html_{$format}"] = '<div> <span> <br> <a> <em> <strong> <cite> <code> <strike> <ul> <ol> <li> <dl> <dt> <dd> <img> <blockquote> <p> <h1> <h2> <h3> <h4> <h5> <h6> <table> <caption> <thead> <th> <td> <tr>';
    $conf['filter_default_format'] = $format;
  }

  // Messaging Mail input filter
  $potential_formats = array();
  $result = db_query("SELECT ff.format, ff.name FROM {filter_formats} ff JOIN {filters} f ON ff.format = f.format WHERE f.module = '%s' AND f.delta = %d", 'messaging', 1);
  while ($row = db_fetch_object($result)) {
    $potential_formats[$row->format] = $row->name;
  }
  if (!empty($potential_formats)) {
    // For now use the first format
    $formats = array_keys($potential_formats);
    $conf['messaging_method_mail'] = array('filter' => $formats[0]);
  }

  return $conf;
}

/**
 * Implementation of hook_views_api().
 */
function atrium_intranet_views_api() {
  return array('api' => 2);
}

/**
 * Implementation of hook_menu_alter().
 */
function atrium_intranet_menu_alter(&$items) {
  // Kill undesirable menu items
  $yank = array(
    'book',
    'rss.xml',
    'node/%node/outline',
  );
  foreach ($yank as $path) {
    if (!empty($items[$path])) {
      unset($items[$path]);
    }
  }

  // Replace default 403
  $items['access-denied']['page callback'] = 'atrium_intranet_403';
}

/**
 * Implementation of hook_imagecache_default_presets_alter().
 */
function atrium_intranet_imagecache_default_presets_alter(&$presets) {
  if (!empty($presets['spaces-logo'])) {
    if (!empty($presets['spaces-logo']['actions'][0]['data']['height'])) {
      $presets['spaces-logo']['actions'][0]['data']['height'] = 40;
    }
  }
}

/**
 * Implementation of hook_link_alter().
 */
function atrium_intranet_link_alter(&$links, $node) {
  if (!empty($links['comment_new_comments']) && !empty($links['comment_comments'])) {
    unset($links['comment_comments']);
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function atrium_intranet_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  switch ($op) {
    case 'view':
      // Load the node's read state.
      if (!isset($node->new)) {
        global $user;
        $readtime = db_result(db_query("SELECT timestamp FROM {history} WHERE uid = %d AND nid = %d", $user->uid, $node->nid));
        $node->new = atrium_intranet_get_readstate($readtime, $node->changed);
      }
      break;
  }
}

/**
 * Implementation of hook_litenode().
 */
function atrium_intranet_litenode() {
  $info = array();
  $info['atrium'] = array();
  $info['atrium']['module'] = t('Atrium');
  $info['atrium']['map'] = array();
  $info['atrium']['fields'] = array(
    'timestamp_1' => array(
      'id' => 'timestamp_1',
      'table' => 'history_user',
      'field' => 'timestamp',
    ),
  );
  return $info;
}

/**
 * Implementation of hook_litenode_alter().
 */
function atrium_intranet_litenode_alter(&$node, $row) {
  $node->new = atrium_intranet_get_readstate($row->history_user_timestamp, $node->changed);
}

/**
 * Helper function to deal with node read state logic.
 */
function atrium_intranet_get_readstate($readtime, $nodetime) {
  if ($readtime == 0 && $nodetime > NODE_NEW_LIMIT) {
    return MARK_NEW;
  }
  elseif ($nodetime > $readtime && $nodetime > NODE_NEW_LIMIT) {
    return MARK_UPDATED;
  }
  return MARK_READ;
}

/**
 * Implementation of hook_form_alter().
 */
function atrium_intranet_form_alter(&$form, &$form_state, $form_id) {
  // Disable notifications when editing a post outside of a group space
  if ((!empty($form['#node']) || $form_id == 'comment_form') && isset($form['notifications'])) {
    $space = spaces_get_space();
    if (empty($space) || $space->type != 'og') {
      $form['notifications']['#access'] = FALSE;
    }
  }

  // Node form customizations/niceties
  if ($form['#id'] == 'node-form') {
    // Even if you have the perms, we don't want you messing with this stuff
    $node = $form['#node'];
    $disable = array('menu', 'comment_settings');

    if (!book_type_is_allowed($node->type)) {
      $disable[] = 'book';
    }

    $node_options = variable_get('node_options_'. $node->type, array('status', 'promote'));
    if (!in_array('revision', $node_options)) {
      $disable[] = 'revision_information';
    }

    foreach ($disable as $key) {
      if (!empty($form[$key])) {
        $form[$key]['#access'] = FALSE;
      }
    }
  }
}

/**
 * Implementation of hook_form_alter() for comment_form.
 */
function atrium_intranet_form_comment_form_alter(&$form) {
  if (!drupal_get_title()) drupal_set_title(t('Reply'));
  // Shrink comment field -- people don't have much to say usually
  $form['comment_filter']['comment']['#rows'] = 8;
}

/**
 * 403 page.
 */
function atrium_intranet_403() {
  // If we're in intranet mode, send anonymous users to a login screen.
  global $user;
  if (!$user->uid && !user_access('access content')) {
    drupal_goto('user/login', 'destination='. $_REQUEST['q']);
  }

  return "<div class='access-denied'>". t('You are not authorized to access this page.') ."</div>";
}
